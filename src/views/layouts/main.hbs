<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hogwarts Academy Homepage</title>
  {{{_sections.styles}}}
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <!-- Swiper -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Navbar CSS -->
  <link rel="stylesheet" href="/navbar.css">
  <!-- TinyMCE -->
  <script src="https://cdn.tiny.cloud/1/kars04ab2ueugpophlra5df3y4wx19okwc1dey6chtnkdw36/tinymce/7/tinymce.min.js"
    referrerpolicy="origin" crossorigin="anonymous"></script>
</head>

<body>
  <!-- üåü NAVBAR -->
  <header class="navbar">
    {{> navbar}}
  </header>

  {{{body}}}
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
    crossorigin="anonymous"></script>
  {{! ----- THAY TH·∫æ TO√ÄN B·ªò KH·ªêI SCRIPT ·ªû CU·ªêI FILE main.hbs B·∫∞NG CODE N√ÄY ----- }}
  <script>
    // Bi·∫øn to√†n c·ª•c ƒë·ªÉ theo d√µi kh·ªüi t·∫°o TinyMCE cho tab "Add"
    let isTinyMCEInitialized = false;

    // --- H√ÄM 1: KH·ªûI T·∫†O TINYMCE ---
    // H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi v√†o ƒë√∫ng th·ªùi ƒëi·ªÉm
    function initializeTinyMCE(selector) {
      if (typeof tinymce !== 'undefined') {
        tinymce.init({
          selector: 'textarea, textarea.wysiwyg-editor',
          plugins: [
            'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
            'checklist', 'mediaembed', 'casechange', 'formatpainter', 'pageembed', 'a11ychecker', 'tinymcespellchecker', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'advtemplate', 'ai', 'uploadcare', 'mentions', 'tinycomments', 'tableofcontents', 'footnotes', 'mergetags', 'autocorrect', 'typography', 'inlinecss', 'markdown', 'importword', 'exportword', 'exportpdf'
          ],
          toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography uploadcare | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
          tinycomments_mode: 'embedded',
          tinycomments_author: 'Author name',
          mergetags_list: [
            { value: 'First.Name', title: 'First Name' },
            { value: 'Email', title: 'Email' },
          ],
          ai_request: (request, respondWith) => respondWith.string(() => Promise.reject('See docs to implement AI Assistant')),
          uploadcare_public_key: 'b33e273dc78492172054',
        });
      } else {
        console.error("Error: TinyMCE library not loaded yet.");
      }
    }

    // --- H√ÄM 2: CHUY·ªÇN TAB (D√ôNG CHUNG) ---
    function switchCourseTab(tabName) {
      document.querySelectorAll("#coursesSection .tab-btn").forEach(btn => btn.classList.remove("active"));
      document.querySelectorAll("#coursesSection .tab-content").forEach(content => content.classList.remove("active"));

      const activeButton = document.querySelector(`#coursesSection .tab-btn[data-tab='${tabName}']`);
      if (activeButton) activeButton.classList.add("active");

      const activeContent = document.getElementById("course" + tabName.charAt(0).toUpperCase() + tabName.slice(1) + "Tab");
      if (activeContent) activeContent.classList.add("active");

      // Logic kh·ªüi t·∫°o TinyMCE cho tab "Add" (khi b·∫•m v√†o)
      if (tabName === 'add' && !isTinyMCEInitialized) {
        initializeTinyMCE('#courseAddTab textarea.wysiwyg-editor');
        isTinyMCEInitialized = true; // ƒê√°nh d·∫•u ƒë√£ kh·ªüi t·∫°o
      }
    }

    // --- H√ÄM 3: FILTER (D√ôNG CHUNG) ---
    function filterCourseListClientSide() {
      const searchTerm = document.getElementById('courseSearchInputClient')?.value.toLowerCase() || '';
      const subCategoryFilter = document.getElementById('categoryFilterClient')?.value || '';
      const statusFilter = document.getElementById('statusFilterClient')?.value || '';
      const courseCards = document.querySelectorAll('.course-card-item');

      if (courseCards.length === 0) return;

      courseCards.forEach(card => {
        const courseName = card.querySelector('.course-name')?.textContent.toLowerCase() || '';
        const subCatId = card.getAttribute('data-subcatid');
        const status = card.getAttribute('data-status');
        const matchesSearch = !searchTerm || courseName.includes(searchTerm);
        const matchesSubCategory = !subCategoryFilter || subCatId === subCategoryFilter;
        const matchesStatus = !statusFilter || status === statusFilter;
        card.style.display = (matchesSearch && matchesSubCategory && matchesStatus) ? '' : 'none';
      });
    }

    // --- S·ª∞ KI·ªÜN CH√çNH: CH·∫†Y SAU KHI M·ªåI TH·ª® (SCRIPT, CSS, ·∫¢NH) ƒê√É T·∫¢I XONG ---
    window.addEventListener('load', () => {

      // 1. Kh·ªüi t·∫°o ngay l·∫≠p t·ª©c cho c√°c editor Tƒ®NH
      // (√Åp d·ª•ng cho course-edit.hbs, lesson-form.hbs)
      initializeTinyMCE('textarea.wysiwyg-editor:not(#courseAddTab textarea.wysiwyg-editor)');

      // 2. X·ª≠ l√Ω logic cho trang course.hbs (trang c√≥ tab)
      const listTabButton = document.querySelector("#coursesSection .tab-btn[data-tab='list']");
      if (listTabButton) {
        const urlParams = new URLSearchParams(window.location.search);
        const _errorAddStr = "{{#if errorAdd}}true{{else}}false{{/if}}";
        const errorAdd = (_errorAddStr === 'true');
        const addSuccess = urlParams.has('addSuccess');
        const updateSuccess = urlParams.has('updateSuccess');
        const deleteSuccess = urlParams.has('deleteSuccess');
        const requestedTab = "{{activeTab}}";

        let activeDefaultTab = 'list';
        if (requestedTab === 'add' || errorAdd) {
          activeDefaultTab = 'add';
        }

        // G·ªçi h√†m switchTab (s·∫Ω t·ª± ƒë·ªông init TinyMCE n·∫øu l√† tab 'add')
        switchCourseTab(activeDefaultTab);

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng (logic n√†y ƒë√£ ƒë√∫ng)
        let successMessage = '';
        if (addSuccess) successMessage = 'Th√™m kh√≥a h·ªçc th√†nh c√¥ng!';
        else if (updateSuccess) successMessage = 'C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng!';
        else if (deleteSuccess) successMessage = 'X√≥a kh√≥a h·ªçc th√†nh c√¥ng!';

        if (successMessage) {
          const listTab = document.getElementById('courseListTab');
          if (listTab) {
            const successMsg = document.createElement('div');
            successMsg.className = 'alert alert-success';
            successMsg.setAttribute('role', 'alert');
            successMsg.style = "background-color: #27ae60; color: white; border: none; margin: 0 auto 20px auto; max-width: 900px; text-align: center; font-weight: bold;";
            successMsg.textContent = successMessage;
            listTab.insertBefore(successMsg, listTab.querySelector('.search-filter-bar'));
            setTimeout(() => successMsg.remove(), 4000);
          }
        }
      }
    });
  </script>
</body>

</html>