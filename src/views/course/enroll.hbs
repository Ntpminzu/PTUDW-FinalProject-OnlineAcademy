{{#section "styles" append=true}}
<link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css">
<link rel="stylesheet" href="/enroll.css">
{{/section}}

<div class="course-page container mt-4">
  <!-- Course Header -->
  <div class="card course-header">
    <h5 class="card-header">
      <i class="bi bi-book-half"></i> Course Details
    </h5>
    <div class="card-body">
      <h5 class="card-title">{{course.CourseName}}</h5>
      <p class="card-text">Description: {{course.CourseName}}</p>
      <p class="card-text">Professor: {{course.InstructorName}}</p>
      <p class="card-text">Duration: {{course.WeekView}} weeks</p>
      <a href="#" class="btn btn-primary btn-sm" id="startCourseBtn">
        <i class="bi bi-play-circle"></i> Start Learning
      </a>
      <a href="/course/detail?id={{course.CourseID}}" class="btn-return">
        <i class="bi bi-arrow-left"></i> Return to Course List
      </a>
    </div>
  </div>

  <!-- Video List -->
  <div class="video-list mt-4">
    <h5>Course Modules</h5>
    <ul class="list-group" id="videoList">
      {{#each lessons}}
      <li class="list-group-item video-item" data-video="{{this.VideoUrl}}" data-lesson-id="{{this.LessonID}}"
        data-course-id="{{../course.CourseID}}">
        <i class="bi bi-play-circle"></i>
        {{this.LessonName}}
        {{#if this.isCompleted}}
        <i class="bi bi-check-circle-fill" style="color: #28a745; margin-left: 10px;"></i>
        {{/if}}
      </li>
      {{/each}}
    </ul>
  </div>

  <!-- Video Player -->
  <div class="video-player mt-4">
    <h5>Now Playing: <span id="videoTitle"></span></h5>
    <div id="playerContainer">
      <div class="plyr__video-embed" id="videoPlayer">
        <iframe src="https://www.youtube.com/embed/mZI-pAdglyM" allowfullscreen allow="autoplay"></iframe>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.plyr.io/3.7.8/plyr.polyfilled.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    // ================== üß≠ C·∫§U H√åNH PLAYER ==================
    const player = new Plyr("#videoPlayer", {
      controls: [
        'play-large', 'play', 'progress', 'current-time',
        'mute', 'volume', 'settings', 'fullscreen'
      ],
      youtube: { rel: 0, modestbranding: 1 }
    });

    // ================== üß© BI·∫æN TO√ÄN C·ª§C ==================
    const startCourseBtn = document.getElementById("startCourseBtn");
    const videoItems = document.querySelectorAll(".video-item");
    const videoTitle = document.getElementById("videoTitle");

    const courseId = videoItems[0]?.getAttribute("data-course-id");
    const courseKey = `course_${courseId}_progress`;

    let learnedLessons = JSON.parse(localStorage.getItem(courseKey)) || [];
    let currentIndex = 0;

    // ================== üé¨ H√ÄM H·ªñ TR·ª¢ ==================
    // Tr√≠ch ID YouTube t·ª´ URL
    function extractYouTubeID(url) {
      const match = url.match(/(?:youtube\.com\/embed\/|youtu\.be\/)([^&#]*)/);
      return match ? match[1] : null;
    }

    // Ph√°t video theo index
    function playVideoAtIndex(index) {
      if (index < 0 || index >= videoItems.length) return;
      videoItems.forEach(v => v.classList.remove("active"));

      const item = videoItems[index];
      item.classList.add("active");

      const videoUrl = item.getAttribute("data-video");
      const title = item.textContent.trim();
      const videoId = extractYouTubeID(videoUrl);

      videoTitle.textContent = title;
      currentIndex = index;

      player.source = {
        type: "video",
        sources: [{ src: videoId, provider: "youtube" }]
      };
      player.play();
    }

    // Ghi log ti·∫øn tr√¨nh ra console
    function logProgress(lessonId, total, done) {
      console.group("üéì COURSE PROGRESS LOG");
      console.log("‚úÖ Lesson done:", lessonId);
      console.log("üìö Course ID:", courseId);
      console.log("üìñ Total lessons:", total);
      console.log("üìà Completed:", done);
      console.log("üíæ LocalStorage key:", courseKey);
      console.log("üß© Learned lessons:", learnedLessons);
      console.groupEnd();
    }

    // ================== ‚ñ∂Ô∏è S·ª∞ KI·ªÜN GIAO DI·ªÜN ==================
    startCourseBtn.addEventListener("click", e => {
      e.preventDefault();
      playVideoAtIndex(0);
    });

    videoItems.forEach((item, index) => {
      item.addEventListener("click", () => playVideoAtIndex(index));
    });

    // ================== üé• S·ª∞ KI·ªÜN KHI VIDEO K·∫æT TH√öC ==================
    player.on("ended", async () => {
      const currentItem = videoItems[currentIndex];
      const lessonId = currentItem.getAttribute("data-lesson-id");

      console.group("üìò VIDEO ENDED EVENT");
      console.log("Lesson ID:", lessonId);
      console.log("Course ID:", courseId);
      console.groupEnd();

      // ‚úÖ C·∫≠p nh·∫≠t ti·∫øn tr√¨nh theo LessonID
      if (!learnedLessons.includes(lessonId)) {
        learnedLessons.push(lessonId);
        localStorage.setItem(courseKey, JSON.stringify(learnedLessons));
      }

      const totalLessons = videoItems.length;
      const completedLessons = learnedLessons.length;

      logProgress(lessonId, totalLessons, completedLessons);

      try {
        // G·ª≠i API ho√†n th√†nh b√†i h·ªçc
        const resLesson = await fetch('/account/finish-lesson', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ lessonId, courseId })
        });

        if (!resLesson.ok) throw new Error("‚ùå Failed to finish lesson");
        console.log("‚úÖ Lesson finished successfully");

        // üèÅ N·∫øu h·ªçc h·∫øt ‚Üí ƒë√°nh d·∫•u DONE
        if (completedLessons >= totalLessons) {
          console.log("üéì All lessons completed ‚Äî marking course DONE");

          const resCourse = await fetch('/account/finish-course', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ courseId })
          });

          if (resCourse.ok) {
            console.log("‚úÖ Course marked as DONE");
            alert("üéâ Congratulations! You‚Äôve completed this course!");
          } else {
            console.error("‚ùå Failed to mark course DONE");
          }
        }

        // ‚ñ∂Ô∏è Ph√°t ti·∫øp b√†i k·∫ø
        if (currentIndex + 1 < videoItems.length) {
          playVideoAtIndex(currentIndex + 1);
        } else {
          console.log("üéâ All videos completed!");
        }

        // üîÑ Reload ƒë·ªÉ hi·ªÉn th·ªã icon check
        setTimeout(() => window.location.reload(), 1500);

      } catch (err) {
        console.error("‚ö†Ô∏è Error:", err);
        setTimeout(() => window.location.reload(), 1500);
      }
    });
  });
</script>

